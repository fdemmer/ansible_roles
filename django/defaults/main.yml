---
### basic settings, role internal configuration

### internal
# switch to disable one-off tasks by default
# use provision_tag.sh script to run those tasks
disabled_by_default: True

### service or site name
# used as default for a number of things, eg. venv, install dir, hostname, ...
# override this in you playbook for the service/site
service_name: "service"


### system configuration, library, service, ... feature switches

## service/server feature flags
# install nginx webserver
install_nginx: True
# install apache webserver
install_apache: False
# install postgres database server
install_postgresql: True
# install redis server
install_redis: False
# install mysql server
install_mysql: False
# install phantomjs binary
install_phantomjs: False

## other service related feature flags
# enable postgix support in the created database and django settings
enable_postgis: False


### downalods, sources, etc
# when creating a new project, use this template
django_project_template: "https://github.com/fdemmer/django_project_template/archive/master.zip"


### directory structure, filesystem layout

# used for logs and virtualenv owner
service_user: "root"
service_group: "root"
service_user_home: "/root"

# path to code root, where the django project code lives
source_path: "/vagrant"
source_media_path: "{{ source_path }}/public/media"

ssl_path: "/etc/ssl/private"

venvs_path: "/var/virtualenvs"
virtualenv_path: "{{ venvs_path }}/{{ service_name }}"

webapps_path: "/var/www"
install_path: "{{ webapps_path }}/{{ service_name }}"
static_path: "{{ webapps_path }}/public/static"
media_path: "{{ webapps_path }}/public/media"
docs_path: "{{ webapps_path }}/public/docs"

log_path: "/var/log"
service_log_path: "{{ log_path }}/{{ service_name }}"
supervisor_log_path: "{{ log_path }}/supervisor"
nginx_log_path: "{{ log_path }}/nginx"
apache_log_path:  "{{ log_path }}/apache2"

nginx_config_path: "/etc/nginx"
apache_config_path: "/etc/apache2"

### service configuration, other than django

# dangerous defaults, use only in development
nginx_autoindex_static_path: "on"
nginx_autoindex_media_path: "on"
# show maintenance.html instead of error 50x
nginx_error_page: False

# gunicorn
gunicorn_host: "0.0.0.0"
gunicorn_port: "8000"
gunicorn_loglevel: "info"
gunicorn_autoreload: "True"
gunicorn_workers: 2
gunicorn_workers_auto: True
gunicorn_worker_class: "sync"

# uwsgi
uwsgi_host: "{{ gunicorn_host }}"
uwsgi_port: "{{ gunicorn_port }}"
uwsgi_workers: "{{ gunicorn_workers }}"
# uwsgi does not serve static files, no use serving on tcp port
use_uwsgi_socket: True
uwsgi_socket: "/tmp/uwsgi.sock"


### feature switches

# switch webservers
use_nginx: True
use_apache: not use_nginx|bool

# switch wsgi servers
use_gunicorn: True
use_uwsgi: not use_gunicorn|bool

# project uses postgresql as database, configure access
use_postgresql: False

# project uses celery tasks, configure worker
use_celery: False

# use redis for caching instead of LocMemCache
use_redis_cache: False

# project uses reversion, run createinitialrevisions
use_reversion: False

# use pip-compile to generate requirements files
use_pip_compile: False
requirement_files: ["base", "dev"]

# requirements file to install in virtualenv
requirements: "requirements.txt"

# load django fixtures into database
load_fixtures: False
fixture_labels: "superuser"

# list of sphinx projects to build
sphinx_projects: []


### django and celery settings

# full name of DJANGO_SETTINGS_MODULE
django_settings_module: "{{ service_name }}.settings"

# settings structure, used on top of {{ install_path }}/{{ service_name }}
write_local_settings: False
secret_settings: "settings/secret.py"
local_settings: "settings/local.py"

# local/machine dependent settings
db_engine_default: "django.db.backends.postgresql_psycopg2"
db_engine_postgis: "django.contrib.gis.db.backends.postgis"

db_engine: "{{ db_engine_default }}"
db_name: "{{ service_name }}"
db_user: "{{ service_name }}"
db_password: "{{ service_name }}"
db_host: "localhost"
db_port: ""
db_conn_max_age: "0"

cache_backend: "django.core.cache.backends.locmem.LocMemCache"
cache_location: "unique-snowflake"

# celery
celery_broker_url: ""
celery_result_backend: ""

celery_worker_loglevel: "debug"
celery_default_queue: "{{ service_name }}"

# additional list of key/value pairs to add to secret.py
more_secrets: []


### settings for the commands tasks

live_host: ""
live_host_user: ""

live_db_host: "{{ live_host }}"
live_db_user: ""
live_db_name: ""

remote_media_path: ""

tempfile: "/tmp/data.pgdump"
remote_tempfile: "{{ tempfile }}"
local_tempfile: "{{ tempfile }}"
target_tempfile: "{{ tempfile }}"
target_itemsfile: "{{ tempfile }}.items"
itemsfile_filter: []
